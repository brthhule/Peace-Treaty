Need to do:
- set up gameplay-- build, train, attack, scout functionality
- set up enemy gameplay-- use random number system to build, train, attack, or scout
- scout functionality-- fog of war, can only explore areas of the map that are on the continent, 
- can only scout territories bordering player's kingdom
- have opponent number variable, figure this out. Is only in generateContinent function and the one above it, doesn't show up anywhere else. Should be in resume game code
(global variable?)
- add fog of war (have another map array, this is shown when the player views the map)
- add population cap to provinces-- add residence building, increasing level increases the amount held by garrison (not affected by commander army size, 
or maybe it is?)
- add immigrant functionality-- the more peaceful a nation, more immigrants come per turn, immigrants needed to train troops
- add feed population functionality-- every turn, each province/army consumes food?
- residential building-- cap on immigrants and troops per province
- add functionality to modify troop stats: militia has 12 carrying capacity, guards have CP increased to 12 when defending, cavalry have CP 
increased to 12 when attacking, knights have CP increased to 12 when fighting against an army with paladins (to counter paladins), paladins just have stats of 16
by value-- do the same for Provinces
-Rewrite battle calculations so both the attacking commander and the defending commander(s) lose CP throughout battle, changes 
how battle functionality works... Consider if all enemy defending units are grouped together or not
Key words to look out for (ctrl f)
- "fix this" things that need to be addressed
- "delete this" delete these lines of code if code works without it
- Have to finish working on ScoutMA
- Fix AttackMA
- Add functionality for training province garrisons

/*How to use colors: */
/*On Linux, you can change the current foreground and background color by writing special character sequences into the output. Write the ESC escape character (octal "\033", hex \x1b), followed by an opening square bracket [. The color definition will follow next, termniated by a lowercase m.

The color definition is a series of numbers, separated by semicolons. In order to make the text color red (number 31),
you can write "\033[31m" which will make any following output red. If you want yellow text (33) on blue background (44),
you write "\033[31;44m". To reset everything back to the default colors, you write "\033[0m".


         foreground background
black        30         40
red          31         41
green        32         42
yellow       33         43
blue         34         44
magenta      35         45
cyan         36         46
white        37         47
Additionally, you can use these:

reset             0  (everything back to normal)
bold/bright       1  (often a brighter shade of the same colour)
underline         4
inverse           7  (swap foreground and background colours)
bold/bright off  21
underline off    24
inverse off      27*/

resources
- https://www.educba.com/c-plus-plus-graphics/ graphics
https://stackoverflow.com/questions/313970/how-to-convert-an-instance-of-stdstring-to-lower-case

				Log Overview           Minute Conversion
June 10th: June 15th: 7 hours     420 
June 16th: 45 min                 45 
June 19th: 2 hours                120 
June 20th: 1 hour, 40 min         100 
June 21nd: 20 min                 20 
June 22nd: 30 min                 30 
June 23rd: 30 min                 30 
June 24: 1 hour, 30 min           90 
June 25: 2 hours, 35 min          155 
June 26: 1 hour, 45 min           105 
June 27: 2 hours, 15 min          135 
June 29: 1 hour                   60 
June 30: 3 hours, 50 min          230 

June Total: 25 hours, 40 min			1540

July 1: 1 hour                    60 
July 2: 1 hour                    60 
July 4: 1 hour, 40 min            100
July 5th: 30 min                  30 
July 6th: 1 hour, 40 min          100 
July 7th: 1 hour, 15 min          75 
July 9th: 1 hour, 55 min          115 
July 10: 55 min                   55 
July 11: 55 min                   55 
July 12: 1 hour                   60 
July 13: 50 min					  				50 
July 15: 1 hour, 15 min			  		75 
July 16: 3 hours, 30 min          210 
July 17: 2 hours, 15 min          135 
July 18: 2 hours, 40 min		 			160 
July 19: 1 hour, 15 min           75 
July 20: 2 hours, 5 min			  		125 
July 23: 1 hour, 20 min			  		80 
July 24: 1 hour, 15 min			  		75 
July 25: 2 hours, 20 min		  		140 
July 27: 2 hours, 5 min			  		125 
July 28: 55 min					  				55 
July 29: 35 min					  				35 
July 30: 2 hours, 25 min		  		145 

July Total: 36 hours, 35 min			2195 

August 1: 1 hour, 40 min		  		100 
August 2: 2 hours, 5 min		  		125 
August 3: 1 hour, 20 min		  		80 
August 4: 50 min									50
August 5: 45 min									45
August 6: 35 min									35
August 7: 20 min									20
August 11: 1 hour, 45 min					105
August 27: 15 min									15

August Total: 9 hours, 35 min		575

September Total: 0								0
October Total: 0									0

November 8: 20 min								20
November 13: 5 min								5
November 23: 35 min								35

November Total: 1 hour						60

January 27: 1 hour, 20 min				80
January 28: 1 hour, 25 min				85
January 30: 5 min									5
January 31: 1 hour, 5 min					65

January Total: 3 hours, 55 min		235

February 1: 20 min								20
February 2: 25 min								25
February 18: 1 hour, 15 min				75
February 19: 2 hours, 30 min			150
February 20: 30 min								30
February 23: 2 hours, 5 min				125
February 24: 4 hours, 40 min			280
February 26: 2 hours							120
February 28: 50 min								50

February Total: 11 hours, 45 min	875


March 2: 20 min										20
March 7: 3 hours, 15 min					195
March 10: 3 hours, 50 min					230

March Total: 7 hours, 25 min			445 



Log:							Total: 98 hours, 45 min - 5925 min


June 10th - June 15th: 7 hours-
  developed introduction
  develoepd framework for player attack, build, and train
  developed functionality for player attack, so player army size plays a factor
  developed translation system to turn inputed coordinates into multidimensional array indices
  developed functionality for showing map of game
  developed functionality for selecting unit for building/training
  developed troop army framework

June 16th: 45 min (all of sixth period, into seventh and including 1st and 2nd period a little bit)
  developed resource management when building infrastructure, fixed all stats function to reflect total player resources
  update land resources functionality-- each turn, increase amount of resources in each province by production rate of buildings
  
June 19th: 2 hours
	9:45 pm - 10:45 pm (1 hour): downloading microsoft visual studio to do offline work, developed troop train function to train troops, subtract
the necessary mamterials, ad add to the total amount of troops
	10:45 pm - 11:45 pm (1 hour): testing game. Need to do the following: fix functionality for kingdom name to include spacing, fix gameplay values
(such as resource amounts) to make sense, fix it so that when entering coordinates and other integer/numerical entries, the game doesn't just break,
need to start adding AI gameplay------------- exception handling

minigame idea: just buildings and training troops-- train as many troop as possible until you can't proceed to the next turn

June 20th: (1 hour, 40 min)
	10:00 pm - 10:20 pm (20 min): Figured out what was wrong with input for kingdom name, used cin.ignore() and fixed it
	10:20 pm - 11:00 pm (40 min): Functionality so that entering mutiple values for first prompt (S/R) wouldn't end up in error (checkChar function)
	11:00 pm - 11:40 pm (40 min): Fixed check char function, made it so function actually works

June 21nd: 20 min
	Tried figuring out how to use multiple cpp files, didn't work

June 22nd: 30 min
	5:45 pm - 6:00 pm (15 min): Figured out how to use multiple files, had to create new project from project -> add module, have to find "solution explorer"
(go to view)
	15 more minutes: tried to create a second file for TrainMAHeader (playerBuildHeader), crashed the system. playerBuildHeader doesn't work. Looking for a solution

June 23rd: 30 min
	10:15 pm - 10:45v (30 min): Tried ironing out how to fix the program. Problems with the first projet (FFE V1.1), made new project (FFE V1.2)

June 24: 1 hour, 30 min
	6:15 am - 7:45 am (1 hour, 30 min): Figured out how to use multiple files. Cannot use functions that use other functions (funciton
in .cpp file cannot use functions from main), found a work around (use functions that don't use other functions, or modify the function
so that it uses passed arguments rather than functions).

June 25: 2 hours, 35 min
	3:45 pm - 4:00 pm (15 min): Uploaded visual stuido on my personal computer at home, tried using a flashdrive to upload the project
and transfer it from laptop to computer. Didn't work, flashdrive failed, is broken now. Copied and pasted code onto repl.it, then
did so again to transfer from repl to vistual studio on pc. Up and running now
	4:00 pm - 4:20 pm (20 min): Fixed checkChar functions so that they didn't use the same variable names. Used keyword/phrase "AV" after string name for each instance to
differentiate between checkChar cases
	4:20 pm - 4:35 pm (15 min): Started deleting extra material (used to use do and while loops to check characters, deleted these structures due to nature of checkChar)
	4:35 pm - 4:35 pm (1 hour): replaced selectUnit function with switch statement rather than if statements, added checkInt to area where user is prompted to enter coordinates for 
upgrade building funciton, did more deleting of extra content
	8:45 pm - 9:30 pm (45 min): Moved translateCoordinate function from main to otherFunctions file, some clearing up

June 26: 1 hour, 45 min
	8:45 pm - 9:30 pm (45 min): Developed framework to use enemy AI, player can now choose continent size and opponent number, created and am now working on army deployment function
	9:30 pm - 10:15 pm (45 min): Developing army commander training
	10:15 pm - 10:30 pm (15 min): Replaced checkChar AV arrays with vectors (so I didn't have to worry about arrays being the ame size))

June 27: 2 hours, 15 min
	1:05 pm - 2:00 pm (55 min): Updated checkInt to use vectors (1:22), cleaned up function initializations and stuff
	3:30 pm - 4:00 (30 min): Checking stuff around, looking at how to utilize mapArmyNumbers, split this into four arrays
	10:00 pm - 10:50 (50 min): Worked on battle calculations (made battleCalculationsTwo to reduce redundancy and clean up code)

June 29: 1 hour
	11:30 am - 12:30 pm (1 hour): something happened, have to use std::cout (I think maybe too much code?), working on scout log fucntion, thinking about adding repeats so 
functions don't automatically default to rerouting to the main menu after an action-- stays at a particular action until player says to go to the previous menu.

June 30: 3 hours, 50 min
	1:30 pm - 1:45 (15 min): Updated variable names (changed armyCommander variables to be more specific), changed trainCommanders function from char to void,
laid framework so that specific functions reroute to the "local" menu rather than the main menu, such as the trainCommanders function going to the "Army Deployment
action menu" rather than the main menu.
	2:35 pm - 5:30 (2 hours, 55 min): Made all action functions void so it loops back, cleaning up of stuff, developed upgradeCommander function and working 
on armyDeployment function
	9:05 pm - 9:45 (40 min): Worked on moveUnit function, starting adding building blocks together

July 1: 1 hour
	9:40 pm - 10:40 (1 hour): Debugging, fixing things, sorting through older versions of game (such as tileConquests). Found something wrong with upgradeBuilding 
(I think it's the declaration of the requiredResourcesBuildings array)

July 2: 1 hour
	9:30 pm - 10:30 (1 hour): Some cleaning work, realized that I can add a thing in the checkChar function to use the AVThree variable to find AVOne and AVTwo,
So I wouldn't have to repeat these all the time (cleaning up efficiency stuff and removing redundant things). Fixed issue with upgradeBuilding function. Cleaned up a
lot of the warnings (such as uninitialized variables).

July 4: 1 hour, 44 min
	12:36 am - 2:00 am (1 hour, 24 min): Cleaned up TrainMA function so it loops back to TrainMA after TrainMAFunction rather than repeating itself, did the thing I did with checkChar (made it so that only one vector has to be passed for it to work)
	10:40 am - 11:00 am (20 min): Tried using Git and stuff (cloning repository-- need to do more research), cleaned up code, started working on playerScout

July 5th: 30 min
	11:15 pm - 11:45 pm (30 min): Worked on viewArmyOverview function, did some cleaning up

July 6th: 1 hour, 40 min
	11:45 am - 12:25 pm (40 min): Developed getTrainBuildCoordinates and findCommanderIndex functions to increase readibility, did some cleaning up
	10:30 pm - 11:30 pm (1 hour): Clean up code, reduce redundancy
https://www.youtube.com/show/SCJESAAO27j5IS9Lsr0NXvRA?season=6&sbp=CgE2

July 7th: 1 hour, 15 min
	9:45 pm - 11:00 pm (1 hour, 15 min): Studying C++ on GeeksforGeeks, added color to showMap function

July 9th: 1 hour, 55 min
	4:05 pm - 5:10 pm (1 hour, 5 min): made the viewAllStatsFunction (consolodiated information into the textFunctions.cpp file, made program more
readible)
    9:20 pm - 10:10 pm (50 min): Developed playerScout function, did stuff, figured out some coloring 

July 10: 55 min
    11:05 pm - 11:20 pm (15 min): Added color to repl (woo)
    11:20 pm - 12:00 am (40 min): worked on more color stuff, modified code such that when the continent is generated, the player starts with 1 commander rather than no commanders

July 11: 55 min
    12:00 am - 12:10 am (10 min): Worked on stuff mentioned in July 10-- carried over
    10:00 pm - 10:15 pm (15 min): Working on fixing presentation erros and stuff
    11:25 pm - 11:55 pm (30 min): Did some more fixing, trying to get deployCommander function to work. Met with "signal: segmentation fault (core dumped)" error message,
tried to see if this error popped up with the playerBuild functions. After entering the letter of the building I want to upgrade, the required resources were printed and then the same error message was printed again.

July 12: 1 hour
    10:50 pm - 11:50 pm (1 hour): Worked on playerScout functions, encountered a lot of erros (the segmentation fault error keeps popping up (maybe use visual studio instead of repl?))

July 13: 50 min
	8:30 pm - 9:20 pm (50 min): Tried fixing errors and stuff, tried moving some functions to otherFunctions.cpp (like createMap),
ran into some errors (something with the strings in the .h files). For some reason, got an abort error when running program-- after it says "gameplay _
selected", the program crashes...

July 15: 1 hour, 15 min
	10:15 pm - 11:30 pm (1 hour, 15 min): Fixed problems by using a string for the checkChar function instead of vectors (used string manipulators
to find each character in the string, added it to a vector inside of the checkChar function instead of passing a vector to the function). Offloaded
the checkChar function to otherFunctions.cpp, started clearing space in the main file. Found a problem: passing a string instead of a vector doesn't
work for checkInt because I can convert string to char through stringName.at(index), but I can't convert string to int, soooo.... Also moved printMapValues
to textFunctions.cpp, moved findCommanderIndex to otherFunctions.cpp. Organizing the main file so it covers the main branch actions (side branches
and other functionalities are moved to textFunctions.cpp (if their primary purpose is to print information) or otherFunctions.cpp (if the purpose 
of the function is to return a variable derived from arguments passed to it)).

July 16: 3 hours, 30 min
	2:00 pm - 2:30 pm (30 min): Tried getting army deployment to work, ran into issues (something with vector out of bound index, don't know what's
wrong-- the index is 0 and the size of the vector is 1). Tried seeing if I can make a vector object so that I can use a class to store the values of 
the various armies.
	8:35 pm - 11:15 pm (2 hours, 40 min): Made CommanderProfile class, made it so that instead of tracking the various commanders by their coordinates, I would identify
them as objects instead. This means that the object's stats and values carry on with them, so I don't have to keep changing the values of the objects
according to wear they are (in the coordinate-based system, each time a unit (commander)'s coordinates changed, I had to update all their coordinates
to mvoe too). It's becoming more streamlined now, started doing the same for provinces as well.
	11:25 pm - 11:45 pm (20 min): Worked on Provinces class

July 17: 2 hours, 15 min
	9:20 pm - 11:00 pm (1 hour, 40 min): Worked on the various classes, created AllUnits class as a parent to Provinces and CommanderProfile, running into errors
trying to convert the code to OOP
	11:15 pm - 11:50 pm (35 min): Worked on Provinces class, did more updating between the main cpp file and the classes

July 18: 2 hours, 40 min
	11:10 am - 11:20 am (10 min): It's all just a giant mess... Working on mapCharacters now (changing it to a pointer to the provinceList objects)
	12:20 pm - 1:00 pm (40 min): Trying to sort out some errors, figuring out how the classes work with each other
	5:50 pm - 6:30 pm (40 min): Fixed some stuff, got the initial screen to work again. Still getting error about line 1732 (vector out of range thing)
worked on Provinces class, removed mapCharacters array (going to use the provincesList). Updated showMap to reflect the change
	10:00 pm - 11:10 pm (1 hour, 10 min): Developed getChar function to replace checkChar function, tried rewriting deployCommander function to
try to address error (putting blocks of code into new functions), didn't work. Still having problems. Thinking about make the main actions into classes
, see if this changes anything. Upsides: classes organize things, if I have a different class for each main action (like building or training), I can
put it into its own files. Organization is a plus (putting everything in its own file). Downside: May be difficult to go through and find stuff (
stuff is organized, but there are so many files and so many functions) 

July 19: 1 hour, 15 min
	10:00 pm - 11:15 pm (1 hour, 15 min): Still trying to figure out how to get rid of the vector error. I think I have to make everything into classes and
objects... messed up the playerScout function. Tried making the TrainMA functions into a class.

July 20: 2 hours, 5 min
	12:00 pm - 12:20 pm (20 min): Worked on TrainMA function-- deleted the first original TrainMA function (it was just meant to
find coordinates in case there weren't coordinates)
	2:40 pm - 3:05 pm (25 min): It's all broken, getting a lot of errors regarding the classes 
(Like "'addSpecificTroop': is not a member of 'Provinces")
	5:35 pm - 5:45 pm (10 min): Don't know what's wrong; I think there's something wrong with the inheritance. Basically just
added the AllUnits stuff to Provinces and made it so that Provinces wasn't a child of AllUnits anymore. AllUnits works
for CommanderProfile though (?????). Getting link error message thingy
	6:05 pm - 6:55 pm (50 min): Made armyDeployment its own class, working on making playerAttack a class (AttackMA)
	7:30 pm - 7:50 pm (20 min): Finished making AttackMA class (for now)

July 23: 1 hour, 20 min
    2:40 pm - 2:45 pm (5 min): Updated sizeof instances-- now includes / sizeof(*data type)
	8:45 pm - 10:00 pm (1 hour, 15 min): Reorganized some stuff, fixed all the warnings that Visual Studio was telling me about,
made Provinces a child of AllUnits, trying to simplify stuff more, ran into error (LNK1168 cannot open c:\Users\Brennen\source\repos\FFE V1.2\x64\Debug\FFE V1.2.exe for writing)
, still haven't fixed the segmentation core fault/vector subscript out of range error

July 24: 1 hour, 15 min
    10:00 pm - 10:50 pm (50 min): Creating Participants class, started offloading variables like commandersList and 
adapting them to Participants
	11:35 PM - 12:00 am (25 min): Worked on Participants class

July 25: 2 hours, 20 min
	10:10 am - 10:45 am (35 min): Worked out instances of commandersList from the main file... have to move on to the other files now.
	11:15 am - 11:45 am (30 min): Worked out some errors that came about due to deleting commandersList
	4:10 pm - 4:30 pm (20 min): Kept working out some errors
	7:40 pm - 8:00 pm (20 min): Kept working on working out errors. Found that there's work to do in 
AttackMA class (Have to sort out how the program knows what target to attack)
	9:45 pm - 10:20 (35 min): Sorted out errors, getting "'&' requires I-value error" now ??????

July 27: 2 hours, 5 min
	5:40 pm - 6:55 pm (1 hour, 15 min): Fixed the I-value errors by just deleting the CommanderProfile pointers and just using
Participants objects)... still getting errors (tried using template to merge checkChar and checkInt into one)
	10:50 pm - 10:55 pm (5 min): Got rid of getValue, caused too many errors, not worth it
	10:55 pm - 11:40 pm (45 min): Made it so that addCommander in Participants returns value by reference rather than by value...
This way, data that has to be mutated/modified can be

July 28: 55 min
    11:15 pm - 12:10 pm (55 min): Working on ScoutMA class... everything is messed up-- have to figure out how scoutLogCalculations is gonna work, differentiating between Provinces and CommanderProfile scout reports

July 29: 35 min
	10:00 pm - 10:15 pm (15 min): Working on ScoutMA-- wondering how I'm gonna keep track of the provinces and commanders
	11:30 pm - 11:50 pm (20 min): Worked on ScoutMA (playerScout function-- figured out how to differentiate between picking a province or commander target)

July 30: 2 hours, 25 min
	10:00 pm - 11:30 pm (1 hour, 30 min): Finished working on ScoutMA (I think), now getting errors about Provinces and CommanderProfile.h
(stuff like "missing type specificer - int assumed. Note: C++ does not support default-int", don't know where these errors are coming from...
the text editor doesn't show anything red as incorrect, maybe I just have to do some restructuring ??????)
	8:45 pm - 9:40 pm (55 min): Worked on debugging code, need to do some work regarding Commander info (like which participants it belongs to)

August 1: 1 hour, 40 min
	8:00 pm - 9:40 pm (1 hour, 40 min): Did some debugging, ran into errors with how Commander and Provinces are returned through returnCommander and returnProvince...
I think I have to make listOfCommanders and listOfProvinces public variables in Participants so I can access objects directly rather than through
functions... yeah, I'm going all in on making listOfCommanders a public variable and accessing it directly

August 2: 2 hours, 5 min
	5:45 pm - 6:25 pm (40 min): Plan is working, getting less errors (100 something instead of 200 something), gonna keep going
	8:15 pm - 8:35 pm (20 min): Have so much work to do.... having problems with the program handling CommanderProfile, gonna have to do something
similar to provincesMap for commanders
	9:40 pm - 9:50 pm (10 min): Ironed out all the errors... It seems like I can only use CommanderProfile and Provinces in the main file, had to 
modify Participants to accomodate this (Participants objects store information like commander index and province x/y coordinates to identify which
element in allCommanders or provincesMap (2D vectors storing all provinces and commanders) need to be accessed). Basically, I went back in time to before
I implemented the use of objects to simplify things (for the most part, still use objects to streamline informaiton and stuff). Program now runs again.
However, still getting vector out of range error thingy--- ?????????
	9:50 pm - 10:25 pm (35 min): Traced back code, found error happened in the code segment before generateNewContinent-- the one initializing 
the resources of each province. Continued tracing code, got a new error after I put the initializing resources loop inside of generateNewContinent...
error is in the Province 3 parameter overload constructor. Figured out that in the constructor, I forgot to add the x < argument thingy to say how many times
the loop for the scout log thingy should run, now having a problem in generateNewContinent in the create capitals loop thing... waiting as debugger says
cannot open the file thingy
	10:30 pm - 10:50 pm (20 min): Got showMap to work, still getting error with create map functionality though

August 3: 1 hour, 20 min
	5:20 - 5:40 pm (20 min): Deleted findProvinceIndex (from main) function because is redundant of findProvinceIndexWithCoordinates in Provinces, moved addNewCommander
from main to Participants. Having problems with create capitals loop in generateNewContinent-- same coordinates keep getting generated?????
	9:20 pm - 10:20 pm (1 hour): did some more work consolidating information and stuff. Main thing I did: moved the map main action stuff to the newly created MapMA
class. Main file went down from ~2000 lines to ~300 lines... found a lot of issues (especially in AllUnits and CommanderProfile-- how to initialize and
keep track of indexInList and other stuff)

August 4: 50 min
	9:45 pm - 10:35 pm (50 min): Figured out what was wrong with rand-- called srand multiple times each time I had to get a random number (just had to call it once,
in main). Figured out create commanders-- error was because added CommanderProfile objects to allCommanders[participantIndexTemp], didn't push 
CommanderProfile vectors to allCommanders yet though.  Something was wrong with BuildMA in which trying to enter the x coordinate would result in
a vector subscript out of range error, fixed it by making getCoordinates work by taking parameters passed by reference rather than returning a vector.
Modified listOfActions so that when picking something to do, help would also be included (stringToSend += 'H';). Made the text color in
printBuildingStats and printResources brighter by using 1m. Getting LNK1168 error (cannot open... exe for writing). Works some times, not other times...
no idea why

August 5: 45 min
	11:30 am - 11:35 am (5 min): Tried to do some debugging, just added comments to see where things are. I think the program is failing because of
something in initialize resources.
	10:30 pm - 11:00 pm (30 min): Trying to debug. Figured out the issue: in initializeResources, used getCapitalCoordinate, but the parameters were formmated
as (int whichCoordinate, int value). To keep track of capital coordinates, array int capitalCoordinates [2] was used in the Participants class.
Changed this so that instead of an array, used capitalX and capitalY. Also changed getCapitalCoordinate so parameters was (char whichCoordinate).
	11:10 pm - 10:20 pm (10 min): deleted the 1m thing... didn't make text brighter, just made it white. Having trouble with getting coordinates for BuildMA. When I enter
the coordinates graphically (normally), doens't work. When I enter coordinates as array/vector/machine sensible coordinates, it works ????
Getting LNK1168 error...

August 6: 35 min
    10:30 pm - 11:10 pm (35 min): Tried to make names for the AI. Developed getKingdomName and setKingdomName in Participants. I tried setting the participant
names when the participants were created, but createNewName needs there to be more than 0 commanders in the list of commnaders or else the list is null (can't 
return list of commanders sie if it's null). Had to move the name generation stuff to the end of generateNewContinent, works now. Have developed framework for 
working with AI and probability of actions and stuff (Read below). Also changed the game synopsis to be less cringy... it's still pretty bad tho

For the AI, have an array like this: int AIActionProbability = [how many actions there are] = {1, 2, 3, 4, 5}

The difference between each element's value affects the probability. For example, since the difference between each element is 1, they will all have an equally likely chance of happening. However, if the array was like this {1, 2, 8, 9, 10}, the differences are the same across the board except for between indices 1 and 2. This means that all other values have the same chance of occurring, but the action that happens between said indices has a greater chance of happening. Applying this, it would be something like: if (randomNumberGenerated >= AIActionProbability[0] && <= AIActionProbability[1]), do some particiular action.

August 7: 20 min
    8:40 pm - 9:00 pm (20 min): Did some aesthetic stuff -- user input now comes up as red text in the console. Started working on developing framework for AI action stuff

August 11: 1 hour, 45 min
    12:40 am - 1:35 am (55 min): Working on BuildMA, created coordinateFunctions.h to keep track of coordinate-related functions and organize otherFunctions.h. Working on getTrainBuildCoordinates to return the right coordinates. Fixec it for the most part, program ends when I enter (5, 1), but it translates everything else (I think it's a problem with the range or something). Figured it out (I think): added the following code to BuildMA in findProvinceCoordinates function

if (provinceXCoordinate == continentSize && provinceYCoordinate == 1)
{
    //weird exception in translating units-- everything else units, except for the bottom left province
    cout << "Continent size: " << continentSize << endl;
    provinceXCoordinate = continentSize - 1;
    provinceYCoordinate = continentSize - 1;
}
    11:10 am - 11:50 am (40 min): Contined working on getTrainBuildCoordinates-- adjusted the input branch of the translateCoordinate tree to be the abs of coordinate - continentSize rather than continentSize - coordinate. Did some aesthetic stuff like adding information and adding spaces
    5:55 pm - 6:05 pm (10 min): Updated formating for printResources and printBuildingStats, stil getting erros when coordinates being entered are on the first y column (y = 1) on the map shown. I think it's being read as -1 or something (the y coordinate), because the x coordinate if statement (to check if it isn't -1) goes through, but the code printing out x and y after entering the y coordinate isn't being printed

August 27: 15 min
    11:15 pm - 11:30 pm (15 min): Started to modify the screen so that it always shows the map instead of having an option to see the map

November 8: 20 min
	3:40 pm - 4:00 pm (20 min): Did some cleaning up, made some do while functions into recursion statements, trying to make code more readible
as I jump back into things. Getting LNK1168 error

November 13: 5 min
    10:05 - 10:10 pm (5 min): I think trying to include recursion is what threw the program off; I reverted to the August 27 save.

November 23: 35 min
    10:25 - 10:35 (10 min): Added kingdonName to viewPlayerStats. Found it somewhat hard to find the viewPlayerStats function to add this change; may have to consider developing a way to find functions easier. Eliminated an unneccessary parameter: introduction function in main.cpp used startOrResume as a paramater when it wouldn't be used to find out listOfActions(3), so took it out. Note: code looks extremely cluncky and difficult to navigate, have to find a way to clean up code I don't need
    10:35 - 11:00 (25 min): Looked around for things to clean up, came across viewArmyOverview. After selecting a commander, the stats would go to the addresses of what the stats were (because the stats function used an array that held pointers to the variables with the states, forgot to add the *). Troops injured is correct (start off all 0), but the other stats are off (ex, food starts off as -2213361676, this shouldn't happen). Have to keep looking through and cleaning code

January 27: 1 hour, 20 min
    12:40 am - 2:00 am (1 hour, 20 min): Refined listOfActions so that each case didn't have to mention m to return to menu-- moved it so it's right before the help menu. Consolidated the help functions in textFunctions to one function-- listOfHelp. Ran into some problems, tried making a Lists class to handle listOfActions and listOfHelp. In the process of updating everything to the new changes.

January 28: 1 hour, 25 min
	2:50 am - 4:15 am (1 hour, 25 min): Worked on consolidating the main file; working on going back to an object-based game rather than mainly using arrays and references to keep track of things. I think the problem I had in the past was that I did things like vector <CommanderProfile> *commandersList instead of <CommanderProfile*>, have to do more research on how to make it work. Brought some participant creation stuff from the main file to Participants.cpp/.h

January 30: 5 min
  5 min - Added isAlive function to Participants, added it to gameplay functionality

January 31: 1 hour, 5 min
	12:30 am - 1:35 am (1 hour, 5 min): Moved some stuff from main to Participants, finished the general structure for PlayerAction, Worked on CommanderProfile and Participants classes

February 1: 20 min
  1 min - Deleted changeCanSelectThisUnit function in ALlUnits and leftover functions from previous edits
  1:55 - 2:00 pm (5 min): Started working on TrainMA-- adding objects to it
  2:05 - 2:20 pm (15 min): Kept working on TrainMA-- developing getCoordinates function

February 2: 25 min
  1:55 - 2:20 pm (25 min): Deleted contented in Provinces relating to Capital status because there is already infrastructure for this in Participants. Did some work with MapMA.cpp. Have to do some fixing to update the connection between Provinces and Participants relating to capital status as well as connected what participant goes with what provinces to what provinces belong under what Participant

February 18: 1 hour, 15 min
	12:25 am - 1:40 am (1 hour, 15 min): Making fixes so program works, going through Provinces.h. Problem with getting inheritance from AllUnits workng. I think the issue is circular dependency-- have to figure out what headers are doing what. I think I found the issue: AllUnits includes Participants, Participants includes AllUnits. I think I have to merge AllUnits and Participants to a singular Participants file to eliminate circular dependency and consolidate it to one header file. Created headersAllocation.txt to see what headers are including what other headers. Also, CommanderProfile has Provinces and Provinces has Commander Profile. I'm going to consolidate Participants and AllUnits and then CommanderProfile and Provinces separately. If I need to combine the new files together, I will if problems continue. Coming up with issue "makeL *** No rule to make target 'Participants.h', needed by main.d'. Stop." I think I need to reorganize the files more so that information is more streamlined and classes/files only get access to what they need

February 19: 2 hours, 30 min
	4:10  - 4:55 pm (45 min): New approach: returning to the previous unit information system (Participants, CommanderProfile, Provinces, AllUnits). Trying to organize things so they make more sense. I think the problem is that when I wrote these files, I did a sloppy job and only considered how they worked by themselves, ignoring inter connectivity. Working on ArmyDeploymentMA Class. Changed the constructors to use Participant *newP instead of passing coordinates to get the capital of the intended participant. Going to work on Commander upgrades-- might move this to the CommanderProfile class
	6:05 pm - 7:50 pm (1 hour, 45 min): I don't think I can move the ArmyDeployment upgrade Commander class because it uses both CommanderProfile and Provinces, and moving it to CommanderProfile would mean that Commanderprofile uses provinces, which may lead to provinces using CommanderProfile and perpetuating circular dependency. Ironed out upgradeCommandersTwo in ArmyDeploymentMA. Created selectCommander method and updated viewArmyOverview method (7:10 pm). Changed it so that instead of using Participants to keep track of what unit belongs to what participant in AllUnits, it would use participantIndex (7:18)-- working on trainCommanders. trainCommanders is very similar to upgradeCommanders; might combine the two. Merged printCostsToTrainAnotherCommander with the one for upgrading to create printCosts (7:37). Worked on trainCommanders and created proceedWtihTraining-- it shoudl all be fine now. Getting some errors in trainCommanders (things like "'missing "" terminating character'"). I think it should resolve itself.

February 20: 30 min
	10:55 - 11:25 pm (30 min): Added #ifndef directives to each header file. Deleted instances of Units.h. Getting unknown type name 'Provinces' error in Participants. I think I have to find a way to incorporate Participants in Provinces so Provinces doesn't need Participants. Same issue with CommanderProfile. Fixed these issues-- CommanderProfile, AllUnits, and Provinces no longer have instances of Participants. New error: MapMA is having trouble operating with other classes/functions. Have to do a rewrite in the near future-- I think I have to make it so that MapMA picks a commanderProfile or Provinces object because it still uses the previous coordinate system with the allCommanders double vector.

February 23: 2 hours, 5 min
	9:00 - 10:30 pm (1 hour, 30 min): Ran program to see what's wrong; error: unknown type name 'Provinces' in coordinateFunctions.h-- coordinateFunctions includes Provinces and Provinces includes coordinateFunctions; I need to change the getCoords function to return a vector of x and y coordinates instead of returning a province. Problems with TrainMA and MapMA constructors-- candidate constructor not viable... no arguments were provided. Fixed the coordinateFunctions issue. Going to rewrite MapMA now. (10:21) Ran into issues with BuildMA constructor because it required passing two cooridinates instead of a provinces object. Changed it to a proinces object instead of coordinates, ended up rewriting BuildMA. I think that because MapMA has the other main actions in it, I have to do the other ones first in order to fix MapMA.
	10:30pm - 11:05 pm (35 min): Ran into error with CommanderProfile. moveUnit and moveUnitOne use Provinces, but CommanderProfile can't have Provinces because they both inherit from AllUnits. Created Mobility class to take care of this-- take the moveUnit methods out of CommanderProfile and put them into a more isolated file that doesn't go under AllUnits. Changed moveUnits to moveUnitsOne and moveUnitsOne to moveUnitsTwo for better understanding. (10:47) Done with mobility class. I'm pretty sure there might be some logic errors, but there are no outstanding issues right now that will prevent the program from running other than the AttackMA function-- I have to go in and fix this (has coordinates passed to it one at a time; I want to pass vectors of coordinates to be organized). Changed the AttackMA constructor to take on vectors and Participants and CommanderProfile objects. AttackMA is a hot mess right now, like, hot hot. Going to come back to this later. Problem with AttackMA: doesn't like that it has Provinces, CommanderProfile, and Participants all imported into one file. IDK what to do here-- have to check this out later

February 24: 4 hours, 40 min
 4:30 - 4:50pm (20 min): Working on solving AttackMA to not need Provinces. I think the issue is that CommanderProfile and Provinces both take from AllUnits, so they can't take methods or instances of each other; inheritance is working against me. I'm going to make a struct to take care of the AllUnits stuff and have CommanderProfile and Provinces take from that. Nevermind (the problem is that Participants uses Provinces)-- I don't think that'll work. I'm thinking about putting provincesMap inside of Participants so I can access the map, which is really the thing I really need, without having to call it in AttackMA. Fixed issue-- CommanderProfile used otherFunctions which used AttackMA for some reason-- deleted include "AttacKMA" in otherFunctins, not showing those errors anymore.

	4:50 - 5:40 pm (50 min): Working on BuildMA constructor error. Error with BuildMA was that an instance used the old constructor-- changed it to the default constructor and it works now. Now going to fix ScoutMA. Moved viewAllStatsFunction from textFunctions to Participants. Following erros along-- I got an error in testFunctions so I moved the problem to CommanderProfile, now doing TrainMA

	5:40 - 6:20 pm (40 min): Working on BuildMA. Removed otherFunctions from textFunctions. Moved printListOfProvinces from textFunctions to Participants. Removed coordinateFunctions from textFunctions, no more BuildMA error. Ran program, console is telling me to fix ArmyDeploymentMA now. Consolidated getNewName and getNewNameTwo into getNewName. Console is telling me to look at otherFunctions now. Added #include "Participants.h" to otherFunctions, now going to Provinces. Fixed instances of commandersPresentIndex to commanders. Going to coordinateFunctions (changed vector<vector<Provinces*>> to vector<vector<Provinces>>). Added otherFunctions to Mobility. Had error: storage class specified for a member declaration in otherFunctions. did #include "main.cpp" and it fixed it. Same problem happening in AttackMa and TrainMA, going to do the same thing-- it worked. 

6:20 - 6:40 pm (20 min): Getting error: 'using namespace' is not allowed in classes basically everywhere. Going in to every .h file and deleting using namespace std and replacing cout and cin with std::cout and std::cin. Literally went into every file and turned every string into std::string and vector into std::vector. I still have some left to do. I'm going to take a break.

9:30 pm - 12:00 am (2 hours, 30 min): Back at it. Cleaning up reamining errors. Went through every cpp file, changed endl to std::endl. Getting " error: storage class specified for a member declaration" message for extern objects in otherFunctions... I think I might have to turn this into a class. Issues with .d files (like AttackMA.d)-- had otherFunctions.h instead of OtherFunctions.h (changed it into a class). Went into each one and updated the class name. Console telling me to work on AttackMA now. Wondering if I can absorb coordinateFunctions into Participants... I'm gonna go for it. I think it's working. I can now make getCoords return Provinces* instead of vector<int>. Started working on ArmyDeploymentMA. Worked on proceedWithTraining among other things. Also working on cleaning up Provinces and CommanderProfile as well as AllUnits.

February 26: 2 hours
	8:10 - 9:05 pm (55 min): Working on figuring out the "no rule to make target" exit status. To use translateCoordinate, Provinces would have to use Participants. Because of this, I'm moving translateCoordinates to OtherFunctions. Broke up translateCoordinate into separate input and output methods to make it easier to understand-- I think I can consolidate them in the future in a way that's more straightforward, but that'll come later. createRandomName: consolidated findConsonant and findVowel by using strings to return characters instead of switch statements. Going to find a way to consolidate getChar and getInt too, or at least simplify them. Consolidated getChar and checkChar into one function by realizing I can literally just use a vector to pass the acceptable values. Going to do the same thing with int then see if I can combine the two. Found out how to consolidate getInt and getChar: consolidate the new methods into getInput and have that return a string. Depending on the context, I will modify the value after the method is called. For example, I'd do something like int num = stoi(getInput(...)) or char letter = getInput(...).at(0). Now, time to go through and debug everything...
	9:05 - 10:10 pm (1 hour, 5 min): Ironed out some problems with Mobility, going to rewrite AttackMA to accomodate being passed Provinces pointers, going to add translateCoordinates methods to Provinces to make translating easier. Rewrote AttackMA to use CommanderProfile objects to find available units to attack with instead of the previous array system. Need to do more cleaning up, but the AttackMA constructors are mostly good to go I think. In the future (maybe next time), I need to clean up Provinces, CommanderProfile, and AllUnits so things are less messy to deal with when working on other classes/methods.

February 28: 50 min
	11:10 pm - 12:00 am (50 min): Getting "No rule to make target 'coordinateFunctions.h', needed by 'AttackMA.d'.  Stop." error. Going to go through the various files and take out instances of coordinateFunctions. Went through all the .d files, deleted instances of coordinateFunctions.h. Console telling me to start fixing stuff from changes I made earlier-- add OF to previously otherFunctions.h. Deleted getTrainProvince (got a province to train units at), replaced with getYourCoords (uses getCoords, checks if province belongs to participant). Removed printCoordinates from Provinces, moved to otherFunctions because otherFunctions uses Provnince, had to move printCoordinates to prevent circular dependency.

March 2: 20 min
	11:20 - 11:40 pm (20 min): Deleted OtherFunctions from Provinces. Working on cleaning up ScoutMA-- error: use of undeclared identifer 'targetProvince.' ScoutMA is a huge mess-- come back to this later.

March 7: 3 hours, 15 min
	6:30 - 8:00 pm (1 hour, 30 min): Went through, fixed instances of getInt/getChar, changed to getInput. Started working on AttackMA. Fixed some things in AllUnits (add/remove troops), basic functionality, simplified calculation process.
	8:05 - 9:50 pm (1 hour, 45 min): Continued to work on AttackMA. Added determineLostCP to straigten out lost power cp-- should be proportional to army sizes (bigger armies will do more damage to smaller armies, same size armies will do less damage to each other). Changed battleCalculations to calculateDeadTroops. Worked a little bit on ArmyDeploymentMA-- applied selectCommander to the deployCommander menu thingy. Going to BuildMA now. Updated Lists.cpp to use vectors for getInput instead of strings for getChar. Updated TrainMA to use getInput. Led back to MapMA-- very messy. Have to sort out stuff with how it interacts with other classes/main actions. I'll come back to this at some later point.

March 10: 3 hours, 50 min
	8:10 - 10:00 pm (1 hour, 50 min): Going to implement an unordered_map instead of a vector in Provinces to keep track of Commanders because 1) Want to get practice with unordered_map 2) Unordered_map is faster, although it uses more memory 3) order of items don't matter 4) I really just need to access the commanders by their names (keys). If the player changes the name of a commander, I can just add a new key-value pair with the commanderProfile pointer and erase the old one. Added basicStats to Provinces to reduce Constructor redundancy. Working on ScoutMA-- something wrong with coordinates. Adding getProvincesCanScout method to reduce chaos and nesting. Added returnCoordinates to CommanderProfile to make coordinates getting a little bit easier. Added printOutputCoordinates to Provinces.h to make printing coordinates easier. Added returnLevel to AllUnits. Moved printOutputCoordinates, translateX, and translateY to AllUnits so CommanderProfile can use them too. Moved returnCoordinate and returnCoordinates from CommanderProfile to AllUnits (9:30). Deleted returnCoordinatesVector from Provinces (redundant). Participants still uses vectors to keep track of Provinces and Commanderprofiles instead of an unordered_map like how Provinces keeps track of Commanders-- this shouldn't matter for now, but I should probably make them uniform in the future. Moved addVectors and subtractVectors from AllUnits to OtherFunctions to Participants can use them too. 
	10:00 - 10:30 pm (30 min): Finished making calculateEachUnit and calculateEachResource methods (and their respective calculateTotal methods)-- can probably merge them at some point, but I'll worry about that another time. Working on created scoutMap in Participants-- this way, the action of generating a scout report is burdened by the Participant (given a province/commander and accuracy level), not the unit itself. Moved updateProvinceResources from OtherFunctions to Main bc Participants used OtherFunctions and Provinces, and OtherFunctions uses Provinces, so I have to offload Provinces stuff from OtherFunctions to other classes/files. Moved createMap and pauseGame to main. Moving showMap to Participants. (10:25)-- finished taking Provinces out of OtherFunctions. Gonna take a break.
	10:30 pm - 12:00 am (1 hour, 30 min): Consolidating the calculateTotal methods into calculateTotal and calculateEach methods into calculateEach. Got error trying to make scoutMap equal to &provincesMap-- something about something being overloaded. Moved the * to after the inside vector instead of the Provinces, ran program to see if it works, console started telling me to work on ArmyDeploymentMA, so I guess I'm doing that now. In the future, I should probably find away to consolidate all the add/subtract methods in AllUnits so it's less clunky. Moving on to BuildMA. Going to TrainMA. Created subtractCheckResources method in Provinces to make upgrade/training checking easier. Console telling me to work on MapMA now-- wrapping into the Participants scoutMap idea now. Creating new class: ScoutMap. Creating another class: ScoutProvinces. Realized I don't need ScoutProvinces-- I was going to create a new class so It'd be separate from ProvincesMap, then I realized the Provinces and CommanderProfile classes are already independent. Moved completeProvinceScoutReport from Provinces to ScoutMap. Moved completeProvinceScoutReport back to Provinces. Realized I don't actually need ScoutMap-- I can just work inside of Participants, deleted it. I messed up the province ScoutLog functionality-- have to go to a previous git commit to see what I did in the past (make sure to committ current version tho)

Changes: 
- Replaced findProvinceCoordinates with getTrainProvince ()
- Replaced getTrainBuildCoordinates and getCoordinates with getCoords;
- Changed deadTroops to troopsLost

Last PC update: August 5 @ 11:37 am
Last Repl update: November 13 @ 10:11 pm

Last Repl upload: November 13 @ 10:11 pm